import pytest
from aiogram.types import InlineKeyboardMarkup, ReplyKeyboardMarkup, InlineKeyboardButton
from keyboards.user_keyboards.main_keyboards import main_keyboard
from keyboards.user_keyboards.user_keyboards import (
    add_review_keyboard,
    repair_services_keyboard,
    chip_tuning_keyboard
)
from tests.mocks import get_mock_session, MockService
from unittest.mock import patch, AsyncMock

def get_keyboard_buttons(keyboard):
    """Helper function to extract button texts from keyboard"""
    if isinstance(keyboard, InlineKeyboardMarkup):
        return [button.text for row in keyboard.inline_keyboard for button in row]
    elif isinstance(keyboard, ReplyKeyboardMarkup):
        return [button.text for row in keyboard.keyboard for button in row]
    return []

async def mock_get_services(*args, **kwargs):
    category_id = kwargs.get('category_id')
    services = [
        MockService(1, "–£–¥–∞–ª–µ–Ω–∏–µ –ö–∞—Ç–∞–ª–∏–∑–∞—Ç–æ—Ä–∞", "–û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ 1", 1000.0, 1),
        MockService(2, "–£–¥–∞–ª–µ–Ω–∏–µ –°–∞–∂–µ–≤–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞", "–û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ 2", 2000.0, 1),
        MockService(3, "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≥–ª—É—à–∏—Ç–µ–ª—å (—Ç–∏—Ö–∏–π, —à—Ç–∞—Ç–Ω—ã–π –∑–≤—É–∫)", "–û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ 3", 3000.0, 1),
    ]
    return [s for s in services if s.category_id == category_id]

@pytest.mark.asyncio
async def test_repair_services_keyboard():
    with patch('keyboards.user_keyboards.user_keyboards.get_session', return_value=get_mock_session()), \
         patch('keyboards.user_keyboards.user_keyboards.get_services', side_effect=mock_get_services):
        keyboard = await repair_services_keyboard(category_id=1)
        assert isinstance(keyboard, InlineKeyboardMarkup)
        assert len(keyboard.inline_keyboard) > 0
        
        buttons_text = get_keyboard_buttons(keyboard)
        assert "–£–¥–∞–ª–µ–Ω–∏–µ –ö–∞—Ç–∞–ª–∏–∑–∞—Ç–æ—Ä–∞" in buttons_text
        assert "–£–¥–∞–ª–µ–Ω–∏–µ –°–∞–∂–µ–≤–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞" in buttons_text
        assert "–ù–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" in buttons_text

@pytest.mark.asyncio
async def test_chip_tuning_keyboard():
    keyboard = await chip_tuning_keyboard()
    assert isinstance(keyboard, InlineKeyboardMarkup)
    assert len(keyboard.inline_keyboard) > 0
    
    buttons_text = get_keyboard_buttons(keyboard)
    assert "üì≤–°–≤—è–∑–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ —Ç–µ–ª–µ–≥—Ä–∞–º" in buttons_text
    assert "–ù–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" in buttons_text

@pytest.mark.asyncio
async def test_main_keyboard():
    keyboard = await main_keyboard()
    assert isinstance(keyboard, ReplyKeyboardMarkup)
    assert len(keyboard.keyboard) > 0
    
    buttons_text = get_keyboard_buttons(keyboard)
    assert "–ê–∫—Ü–∏–∏ –∏ —Å–∫–∏–¥–∫–∏" in buttons_text
    assert "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤" in buttons_text
    assert "–†–µ–º–æ–Ω—Ç –≥–ª—É—à–∏—Ç–µ–ª—è" in buttons_text
    assert "–¢—é–Ω–∏–Ω–≥ –≤—ã—Ö–ª–æ–ø–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã" in buttons_text
    assert "–ß–∏–ø —Ç—é–Ω–∏–Ω–≥ –¥–≤–∏–≥–∞—Ç–µ–ª—è" in buttons_text

@pytest.mark.asyncio
async def test_add_review_keyboard():
    keyboard = await add_review_keyboard()
    assert isinstance(keyboard, InlineKeyboardMarkup)
    assert len(keyboard.inline_keyboard) > 0
    
    buttons_text = get_keyboard_buttons(keyboard)
    assert "üí¨–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –Ω–∞ –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç–∞—Ö" in buttons_text
    assert "üí¨–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ" in buttons_text
    assert "üí¨–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –Ω–∞ –ê–í–ò–¢–û" in buttons_text
    assert "–ù–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" in buttons_text
