import asyncio
import logging

from aiogram import Router, F, Bot
from aiogram.exceptions import TelegramRetryAfter, TelegramBadRequest
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup
from pydantic import ValidationError

from data.db_connect import get_session
from data.user_requests import get_all_users
from keyboards.admin_keyboards.main_admin_keyboards import get_confirm_button, confirm_keyboard, add_mailing_button, \
    admin_keyboards
from utils.logging_settings import setup_logging
from utils.states import MailingState

logger = logging.getLogger(setup_logging())

admin_mailing_router = Router()


@admin_mailing_router.message(F.text == "üì®–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
async def admin_mailing_handler(message: Message, state: FSMContext):
    await message.answer("–î–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏")
    await state.set_state(MailingState.MAIL_TEXT)


@admin_mailing_router.message(MailingState.MAIL_TEXT)
async def add_button_choice(message: Message, state: FSMContext):
    await state.update_data(mailing_text=message.text,
                            message_id=message.message_id,
                            chat_id=message.from_user.id)
    await state.set_state(MailingState.ADD_BUTTON)
    await message.answer("–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –∫ —Ä–∞—Å—Å—ã–ª–∫–µ?",
                         reply_markup=await get_confirm_button())


@admin_mailing_router.callback_query(MailingState.ADD_BUTTON,
                                     F.data.in_(['add_mailing_button',
                                                 'no_mailing_button', ], ), )
async def add_button_mailing(callback_query: CallbackQuery,
                             state: FSMContext,
                             ):
    if callback_query.data == 'add_mailing_button':
        await callback_query.message.answer("–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä\n"
                                            "ü§ó–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", reply_markup=None)
        await state.set_state(MailingState.BUTTON_TEXT)
    elif callback_query.data == 'no_mailing_button':
        await callback_query.message.edit_reply_markup(reply_markup=None)
        await callback_query.message.answer("–î–æ–±–∞–≤—å —Ñ–æ—Ç–æ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ")
        await state.set_state(MailingState.ADD_MEDIA)
    await callback_query.answer()


@admin_mailing_router.message(MailingState.BUTTON_TEXT)
async def get_text_button(message: Message, state: FSMContext):
    await state.update_data(button_text=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å —Å—Å—ã–ª–∫—É –¥–ª—è –∫–Ω–æ–ø–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä\n"
                         "https://ya.ru/",
                         disable_web_page_preview=True)
    await state.set_state(MailingState.BUTTON_URL)


@admin_mailing_router.message(MailingState.BUTTON_URL)
async def get_url_button(message: Message, state: FSMContext):
    await state.update_data(button_url=message.text)
    await state.set_state(MailingState.ADD_MEDIA)
    await message.answer("–î–æ–±–∞–≤—å —Ñ–æ—Ç–æ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ")


async def confirm(
        message: Message,
        bot: Bot,
        photo_id: str,
        message_text: str,
        chat_id: int,
        reply_markup: InlineKeyboardMarkup = None,
):
    await bot.send_photo(chat_id=chat_id,
                         photo=photo_id,
                         caption=message_text,
                         reply_markup=reply_markup)
    await message.answer("–í–æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∞ –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –æ–ø—Ä–∞–≤–ª–µ–Ω–∞\n"
                         "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç—Ä–ø–∞–≤–∫—É.",
                         reply_markup=await confirm_keyboard()
                         )


@admin_mailing_router.message(MailingState.ADD_MEDIA, F.photo)
async def sending_mailing(message: Message, bot: Bot, state: FSMContext):
    await state.update_data(photo=message.photo[-1].file_id)
    data = await state.get_data()
    message_text = data.get("mailing_text")
    chat_id = int(data.get("chat_id"))
    photo_id = data.get("photo")
    await confirm(message=message,
                  bot=bot,
                  photo_id=photo_id,
                  message_text=message_text,
                  chat_id=chat_id)


async def send_mails(
        photo: str,
        mailing_text: str,
        bot: Bot,
        button_message
):
    async for session in get_session():
        users = await get_all_users(session)
        for user in users:
            try:
                await bot.send_photo(chat_id=user.user_id,
                                     photo=photo,
                                     caption=mailing_text,
                                     reply_markup=button_message)
                await asyncio.sleep(0.5)
            except TelegramRetryAfter as e:
                logger.error(e)
                await asyncio.sleep(e.retry_after)
                await bot.send_photo(chat_id=user.user_id,
                                     photo=photo,
                                     caption=mailing_text,
                                     reply_markup=button_message)


@admin_mailing_router.callback_query(F.data.in_(['confirm_mailing',
                                                 'cancel_mailing', ], ),
                                     )
async def sender_mailing(
        call: CallbackQuery,
        bot: Bot,
        state: FSMContext,
):
    if call.data == 'confirm_mailing':
        data = await state.get_data()
        await state.clear()
        photo = data.get('photo')
        mailing_text = data.get('mailing_text')
        button_text = data.get('button_text')
        button_url = data.get('button_url')
        try:
            button_message =await add_mailing_button(
                text_button=button_text,
                url_button=button_url,
            )
        except ValidationError as error:
            logger.info(error)
            button_message = None
        try:
            await call.message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Ç–µ–ª–µ–≥—Ä–∞–º –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è "
                                      "–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π "
                                      "–ø–æ—ç—Ç–æ–º—É –æ—Ç–ø—Ä–∞–≤–∫–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.\n"
                                      "–î–æ–∂–¥–∏—Ç–µ—Å—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ")
            await send_mails(
                photo,
                mailing_text,
                bot,
                button_message
            )
            await call.message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
        except TelegramBadRequest as e:
            logger.error(e)
            await call.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏ {e}"
                                      ",\n–ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É",
                                      reply_markup=await admin_keyboards())
    else:
        await state.clear()
        await call.message.answer("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Ä–∞—Å—Å—ã–ª–∫—É")
    await call.answer()
    await call.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=await admin_keyboards())


@admin_mailing_router.message(MailingState.ADD_MEDIA, ~F.photo)
async def incorrect_mailing_photo(message: Message, state: FSMContext) -> None:
    await message.answer("–ù—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é!")
